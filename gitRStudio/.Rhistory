& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
ggplot(data=r2, aes(x = x, y = y)) + geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
}
}
dev.off()
getwd()
pdf("Autocorrelation.pdf")
## autocorrelation
# loop over the different group sizes
i = 5
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
accPerGroupsize <- accPerGroupsize[1:10,]
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
ggplot(data=r2, aes(x = x, y = y)) + geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
}
dev.off()
?assign
pdf("Autocorrelation.pdf")
par(mfrow = c(5,5))
for(i in 1:g){
print(paste0("Starting with group ", i))
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
accPerGroupsize <- accPerGroupsize[1:10,]
# vector of plot names
p = c()
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
plot <- ggplot(data=r2, aes(x = x, y = y))
+ geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
assign(paste0("plot", i), plot)
p = c(p, paste0("plot", i))
}
}
plot_grid(p, labels = "AUTO", hjust = 0, vjust = 1)
dev.off()
library(cowplot)
install.packages("cowplot")
#install.packages("cowplot")
library(cowplot)
pdf("Autocorrelation.pdf")
par(mfrow = c(5,5))
for(i in 1:g){
print(paste0("Starting with group ", i))
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
accPerGroupsize <- accPerGroupsize[1:10,]
# vector of plot names
p = c()
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
plot <- ggplot(data=r2, aes(x = x, y = y))
+ geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
assign(paste0("plot", i), plot)
p = c(p, paste0("plot", i))
}
}
plot_grid(p, labels = "AUTO", hjust = 0, vjust = 1)
dev.off()
p
pdf("Autocorrelation.pdf")
par(mfrow = c(5,5))
# vector of plot names
p = c()
for(i in 1:g){
print(paste0("Starting with group ", i))
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
accPerGroupsize <- accPerGroupsize[1:10,]
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
plot <- ggplot(data=r2, aes(x = x, y = y))
+ geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
assign(paste0("plot", i), plot)
p = c(p, paste0("plot", i))
}
}
plot_grid(p, labels = "AUTO", hjust = 0, vjust = 1, )
dev.off()
pdf("Autocorrelation.pdf")
par(mfrow = c(5,5))
# vector of plot names
p = c()
for(i in 1:g){
print(paste0("Starting with group ", i))
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
accPerGroupsize <- accPerGroupsize[1:10,]
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
plot <- ggplot(data=r2, aes(x = x, y = y))
+ geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
assign(paste0("plot", i), plot)
p = c(p, paste0("plot", i))
}
}
plot_grid(p, labels = "AUTO", hjust = 0, vjust = 1 )
dev.off()
p
# vector of plot names
p = c()
p
p = c(p, paste0("plot", i))
p
pdf("Autocorrelation.pdf")
par(mfrow = c(5,5))
# vector of plot names
p = c()
for(i in 1:g){
print(paste0("Starting with group ", i))
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
accPerGroupsize <- accPerGroupsize[1:10,]
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
plot <- ggplot(data=r2, aes(x = x, y = y)) + geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
assign(paste0("plot", i), plot)
p = c(p, paste0("plot", i))
}
}
plot_grid(p, labels = "AUTO", hjust = 0, vjust = 1 )
dev.off()
p
plot1
pdf("Autocorrelation.pdf")
par(mfrow = c(5,5))
# vector of plot names
p = c()
for(i in 1:g){
print(paste0("Starting with group ", i))
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
accPerGroupsize <- accPerGroupsize[1:10,]
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
plot <- ggplot(data=r2, aes(x = x, y = y)) + geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
assign(paste0("plot", i), plot)
p = c(p, paste0("plot", i))
}
}
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, labels = "AUTO", hjust = 0, vjust = 1 )
dev.off()
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, labels = "AUTO", hjust = 0, vjust = 1 )
dev.off()
dev.off()
pdf("Autocorrelation.pdf")
i = 5
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
accPerGroupsize <- accPerGroupsize[1:10,]
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
plot <- ggplot(data=r2, aes(x = x, y = y)) + geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
assign(paste0("plot", i), plot)
p = c(p, paste0("plot", i))
}
dev.off()
getwd()
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, labels = "AUTO", hjust = 0, vjust = 1 )
pdf("Autocorrelation.pdf")
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, labels = "AUTO", hjust = 0, vjust = 1 )
dev.off()
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, labels = "AUTO", hjust = 0, vjust = 1 )
dev.off()
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, labels = "AUTO", hjust = 0, vjust = 1 )
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, labels = "AUTO", hjust = 0, vjust = 1 )
ggsave("Autocorrelation.pdf")
for(i in 1:g){
print(paste0("Starting with group ", i))
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
accPerGroupsize <- accPerGroupsize[1:10,]
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
plot <- ggplot(data=r2, aes(x = x, y = y)) + geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
assign(paste0("plot", i), plot)
p = c(p, paste0("plot", i))
}
}
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, labels = "AUTO", hjust = 0, vjust = 1 )
ggsave("Autocorrelation.pdf")
for(i in 1:g){
print(paste0("Starting with group ", i))
accPerGroupsize <- collapseCytosines[which(collapseCytosines[,"group"] == i),
c("start", "end", "group")]
#accPerGroupsize <- accPerGroupsize[1:10,]
r <- apply(accPerGroupsize, 1, function(v, accs){
segment <- accs$methLevel[which(start(accs) >= as.numeric(v[1])
& start(accs) <= as.numeric(v[2]))]
#print(segment)
if(all(segment == 0)){
return(NA)
}else{
a <- acf(segment, plot = FALSE)
a$lag <- a$lag/a$lag[length(a$lag)]
a <- data.frame(lag = a$lag, acf = a$acf)
return(a)
}
}, accs = accs)
r <- r[which(!is.na(r))]
if(length(r) == 0){
next
}else{
r <- lapply(seq_along(r), function(i){
colnames(r[[i]])[2] <- paste0("acf", names(r)[[i]])
return(r[[i]])
})
r1 <- Reduce(function(x, y){ merge(x, y, by="lag", all = TRUE) }, r)
# plot
set.seed(45)
r2 <- data.frame(x = rep(r1$lag, (ncol(r1)-1)), y = c(as.matrix(r1[,2:ncol(r1)])),
variable = rep(colnames(r1)[2:ncol(r1)], each = nrow(r1)))
r2 <- r2[which(!is.na(r2[,"y"])),]
plot <- ggplot(data=r2, aes(x = x, y = y)) + geom_line(aes(color=variable), show.legend = FALSE)
#+ geom_point(aes(color = variable), show.legend = FALSE)
assign(paste0("plot", i), plot)
p = c(p, paste0("plot", i))
}
}
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, labels = "AUTO", hjust = 0, vjust = 1 )
ggsave("Autocorrelation.pdf")
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, labels = "AUTO", hjust = 0, vjust = 1 )
ggsave("Autocorrelation.pdf")
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, labels = "AUTO", hjust = 0, vjust = 1 )
ggsave("Autocorrelation.pdf")
save.image()
installed.packages("knitr")
installed.packages("marmap")
installed.packages("ggplot2")
install.packages("knitr")
setwd("CodingCamp/")
install.packages("marmap")
install.packages("viridis")
install.packages("ncdf4")
install.packages("ncdf4")
install.packages("ncdf4")
getwd(9)
getwd()
install.packages("ncdf4")
install.packages("ncdf4")
installed.packages("marmap")
install.packages("marmap")
library(keras)
install.packages("keras")
library(keras)
install_keras()
install_keras()
install.packages("keras")
install.packages("keras")
library(keras)
setwd("gitRStudio/")
